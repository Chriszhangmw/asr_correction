# network architecture
# encoder related
elayers: 12
eunits: 2048
# decoder related
dlayers: 6
dunits: 2048
# attention related
adim: 256
aheads: 4

# hybrid CTC/attention
mtlalpha: 0.3

# label smoothing
lsm-weight: 0.1

# minibatch related
batch-size: 32
maxlen-in: 512  # if input length  > maxlen-in, batchsize is automatically reduced
maxlen-out: 150 # if output length > maxlen-out, batchsize is automatically reduced

# optimization related
sortagrad: 0 # Feed samples from shortest to longest ; -1: enabled for all epochs, 0: disabled, other: enabled for 'other' epochs
opt: noam
accum-grad: 1
grad-clip: 5
patience: 10
epochs: 100
dropout-rate: 0.1

# transformer specific setting
backend: pytorch
model-module: "espnet.nets.pytorch_backend.e2e_asr_transformer:E2E"
transformer-input-layer: conv2d     # encoder architecture type
transformer-lr: 6.0
transformer-warmup-steps: 1800
transformer-attn-dropout-rate: 0.0
transformer-length-normalized-loss: false
transformer-init: pytorch


# Decoding related
beam-size: 10
penalty: 0.0
maxlenratio: 0.0
minlenratio: 0.0
ctc-weight: 0.3
lm-weight: 0.7

use_adapters: true
load_pretrained_model: "<path-to-model-with-adapters>:<modules-to-load>:<excluded-modules>"  # Example: lid_42_meta_adapter.pt::
adapter_train_languages: "ar"
shared_adapter: "ru_cy_it_eu_pt" # Set to the source languages on which it is meta-trained
dataset: ru_cy_it_eu_pt_ar
adapter_fusion: false
train_adapter_with_head: true
# cs
opt: adam
adam_lr: 0.01